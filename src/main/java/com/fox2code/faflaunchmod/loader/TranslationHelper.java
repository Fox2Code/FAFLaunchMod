package com.fox2code.faflaunchmod.loader;

import com.fox2code.faflaunchmod.launcher.BuildConfig;
import com.fox2code.faflaunchmod.launcher.Main;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.stream.JsonReader;

import java.io.*;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.function.Function;

final class TranslationHelper {
    static final String BASE_TRANSLATION_PATH = "i18n/messages.properties";
    private static final HashMap<String, String> translations = new HashMap<>();

    private TranslationHelper() {}

    static void load(String path, Function<String, String> customPatchingMethod) throws IOException {
        URL url = Main.getLaunchClassLoader().findResource(path);
        if (url == null) return;
        JsonObject translationJson;
        try (InputStream inputStream = url.openStream()) {
            translationJson = ModLoader.getGson().fromJson(new JsonReader(
                    new InputStreamReader(inputStream, StandardCharsets.UTF_8)), JsonObject.class);
        }
        for (Map.Entry<String, JsonElement> entry : translationJson.entrySet()) {
            if (entry.getKey().startsWith("__") || !entry.getValue().isJsonPrimitive()) {
                continue;
            }
            String translation = entry.getValue().getAsString();
            if (translation != null) {
                translation = customPatchingMethod.apply(translation);
            }
            translations.put(entry.getKey(), translation == null ? "" : translation);
        }
    }

    static void addFallbackTranslation(String key, String value) {
        translations.putIfAbsent(key, value);
    }

    static byte[] patchBaseTranslations(byte[] data) throws IOException {
        System.out.println("Patched translations!");
        Properties properties = new Properties();
        properties.load(new InputStreamReader(
                new ByteArrayInputStream(data), StandardCharsets.UTF_8));
        for (Map.Entry<String, String> entry : translations.entrySet()) {
            properties.setProperty(entry.getKey(), entry.getValue());
        }
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        properties.store(new BufferedWriter(new OutputStreamWriter(
                byteArrayOutputStream, StandardCharsets.UTF_8)),
                "Auto generated by FAFLauncher Mod");
        return byteArrayOutputStream.toByteArray();
    }
}
